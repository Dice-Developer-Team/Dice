name: CMake

on: [push, pull_request]

jobs:
  build-linux-musl:
    env:
      BUILD_TYPE: Release
      VCPKG_BINARY_SOURCES: 'clear;nuget,GitHub,readwrite'
    strategy:
      fail-fast: false
      matrix:
        include:
        - link: https://musl.cc/x86_64-linux-musl-native.tgz
          cc: /opt/x86_64-linux-musl-native/bin/gcc
          cxx: /opt/x86_64-linux-musl-native/bin/g++
          triplet: x64-linux
          mono: 'mono'
        
    runs-on: ubuntu-18.04
    
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build
      
    - name: Install Cross Compiler
      run: wget -O compiler.tgz ${{ matrix.link }} && tar xvzf compiler.tgz -C /opt
      
    - name: Cache
      uses: actions/cache@v2.1.4
      id: cache
      with:
        # A list of files, directories, and wildcard patterns to cache and restore
        path: ${{github.workspace}}/vcpkg/vcpkg
        # An explicit key for restoring and saving the cache
        key: ${{ runner.os }}-${{ matrix.triplet }}
        restore-keys:  ${{ runner.os }}-${{ matrix.triplet }}
        
    - name: Setup Vcpkg
      shell: bash
      if: steps.cache.outputs.cache-hit != 'true'
      working-directory: ${{github.workspace}}/vcpkg
      run: ./bootstrap-vcpkg.sh
      
    - name: 'Setup NuGet Credentials'
      shell: 'bash'
      # Replace <OWNER> with your organization name
      run: >
        ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1`
        sources add
        -source "https://nuget.pkg.github.com/Dice-Developer-Team/index.json"
        -storepasswordincleartext
        -name "GitHub"
        -username "Dice-Developer-Team"
        -password "${{ secrets.GITHUB_TOKEN }}"

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run:  CC=${{ matrix.cc }} CXX=${{ matrix.cxx }} cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DVCPKG_OVERLAY_TRIPLETS=${{ github.workspace }}/triplets -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} -DCMAKE_PREFIX_PATH=${{ matrix.path }}

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
    
    - name: Upload
      uses: actions/upload-artifact@v2.2.2
      with:
        # Artifact name
        name: ${{ matrix.triplet }}
        # A file, directory or wildcard pattern that describes what to upload
        path: "**/w4123.Dice.dll"
